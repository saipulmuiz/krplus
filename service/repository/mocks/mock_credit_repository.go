// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/saipulmuiz/krplus/service (interfaces: CreditRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/saipulmuiz/krplus/models"
)

// MockCreditRepository is a mock of CreditRepository interface.
type MockCreditRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCreditRepositoryMockRecorder
}

// MockCreditRepositoryMockRecorder is the mock recorder for MockCreditRepository.
type MockCreditRepositoryMockRecorder struct {
	mock *MockCreditRepository
}

// NewMockCreditRepository creates a new mock instance.
func NewMockCreditRepository(ctrl *gomock.Controller) *MockCreditRepository {
	mock := &MockCreditRepository{ctrl: ctrl}
	mock.recorder = &MockCreditRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreditRepository) EXPECT() *MockCreditRepositoryMockRecorder {
	return m.recorder
}

// CreateCredits mocks base method.
func (m *MockCreditRepository) CreateCredits(arg0 []models.CreditLimit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCredits", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCredits indicates an expected call of CreateCredits.
func (mr *MockCreditRepositoryMockRecorder) CreateCredits(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCredits", reflect.TypeOf((*MockCreditRepository)(nil).CreateCredits), arg0)
}

// GetCreditByID mocks base method.
func (m *MockCreditRepository) GetCreditByID(arg0 int64) (*models.CreditLimit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreditByID", arg0)
	ret0, _ := ret[0].(*models.CreditLimit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreditByID indicates an expected call of GetCreditByID.
func (mr *MockCreditRepositoryMockRecorder) GetCreditByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreditByID", reflect.TypeOf((*MockCreditRepository)(nil).GetCreditByID), arg0)
}

// GetCredits mocks base method.
func (m *MockCreditRepository) GetCredits(arg0 models.CreditLimitRequest) (*[]models.CreditLimit, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredits", arg0)
	ret0, _ := ret[0].(*[]models.CreditLimit)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCredits indicates an expected call of GetCredits.
func (mr *MockCreditRepositoryMockRecorder) GetCredits(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredits", reflect.TypeOf((*MockCreditRepository)(nil).GetCredits), arg0)
}

// UpdateCredit mocks base method.
func (m *MockCreditRepository) UpdateCredit(arg0 int64, arg1 models.CreditLimit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCredit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCredit indicates an expected call of UpdateCredit.
func (mr *MockCreditRepositoryMockRecorder) UpdateCredit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCredit", reflect.TypeOf((*MockCreditRepository)(nil).UpdateCredit), arg0, arg1)
}
